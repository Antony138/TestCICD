import("./OtherFastfiles/TempKeychain")
import("./OtherFastfiles/RunUnitTest")

default_platform(:ios)

platform :ios do  
  before_all do
    setup_ci # will creste the "fastlane_tmp_keychain-db" in CI
    check_env_var
  end

  desc "Building"
  lane :build do
    # send_slack_message

    xcode_select("/Applications/Xcode.app")
    
    # run_unit_test

    match_adhoc
    # match_development

    archive
    
    upload_deploygate

  end

  rescue => exception
    # Error handle
    delete_keychain(name: 'fastlane_tmp_keychain-db') if File.exist? File.expand_path("~/Library/Keychains/fastlane_tmp_keychain-db")
    clean_build_artifacts
    # send error message to Slack
    raise exception

  after_all do
    delete_keychain(name: 'fastlane_tmp_keychain-db') if File.exist? File.expand_path("~/Library/Keychains/fastlane_tmp_keychain-db")
    clean_build_artifacts
  end

end

private_lane :get_apple_api_key do
	api_key = app_store_connect_api_key(
		key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
		issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
		key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
		is_key_content_base64: true
	)
end

private_lane :match_adhoc do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"], # 因为是环境变量，不写也可以
		type: 'adhoc',
		app_identifier: "jp.tokyo.TestCICD",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
    # keychain_name: 'fastlane_tmp_keychain-db'
	)
end

private_lane :match_development do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"], # 因为是环境变量，不写也可以
		type: 'development',
		app_identifier: "jp.tokyo.TestCICD",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
    # keychain_name: 'fastlane_tmp_keychain-db',
    # readonly: false,
    # include_all_certificates: true,
    # force_for_new_certificates: true
	)
end

lane :match_debug_development_adhoc do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"],
		type: 'development',
		app_identifier: "jp.tokyo.TestCICD.debug",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
    readonly: false,
    include_all_certificates: true,
    force_for_new_certificates: true
	)

  match(
    git_url: ENV["MATCH_GIT_URL"],
		type: 'adhoc',
		app_identifier: "jp.tokyo.TestCICD.debug",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
	)
end

lane :match_alpha_development_adhoc do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"],
		type: 'development',
		app_identifier: "jp.tokyo.TestCICD.alpha",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
    readonly: false,
    include_all_certificates: true,
    force_for_new_certificates: true
	)

  match(
    git_url: ENV["MATCH_GIT_URL"],
		type: 'adhoc',
		app_identifier: "jp.tokyo.TestCICD.alpha",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
	)
end

private_lane :archive do
	# update_code_signing_settings(use_automatic_signing: false)
	settings_to_override = {
		:BUNDLE_IDENTIFIER => "jp.tokyo.TestCICD",
		:PROVISIONING_PROFILE_SPECIFIER => "match AdHoc jp.tokyo.TestCICD"
	}
  
	gym(
		# codesigning_identity: "iPhone Distribution", # 不能设置，否则mapbox会报需要一个development team
    # codesigning_identity: "Apple Distribution",
		scheme: "TestCICD", # The project's scheme. Make sure it's marked as `Shared`
		clean: true,
		xcargs: settings_to_override,
		silent: true,
    export_method: "ad-hoc",
    export_options: {
      provisioningProfiles: { 
        "jp.tokyo.TestCICD" => "match AdHoc jp.tokyo.TestCICD"
      }
    }
	)
end

private_lane :upload_deploygate do
  rc4_main_api_token = '575fda81-3ffb-493a-adca-7d342f6f7267'
  rc4_branchs_api_token = 'e47360ba-3434-4650-af4f-f6a3352a16d7'

  commit = last_git_commit
  puts "last_git_commit: #{commit}"
  
  branch_name = git_branch
  branch_name_head_ref = "#{ENV["BRANCH_NAME_HEAD_REF"]}"
  puts "branch_name: #{branch_name}"
  puts "BRANCH_NAME_HEAD_REF(from github action): #{ENV["BRANCH_NAME_HEAD_REF"]}"
  puts "BRANCH_NAME_REF_NAME(from github action): #{ENV["BRANCH_NAME_REF_NAME"]}"
  
  deploygate_api_token = branch_name == 'main' ? rc4_main_api_token : rc4_branchs_api_token
  deploygate_user = branch_name == 'main' ? 'RC4-main' : 'RC4-branchs'
  puts "deploygate_api_token: #{deploygate_api_token}; deploygate_user: #{deploygate_user}"

  deploy_message = "#{ENV["DEPLOYGATE_CUSTOM_MESSAGE"]}. #{commit[:abbreviated_commit_hash]} #{commit[:message]}"
  puts "deploy_message: #{deploy_message}"

  deploygate(
      api_token: 'f0e6b9c8-083d-4d2d-9771-640f2a580018',
      user: 'antony1380',
      ipa: "TestCICD.ipa",
      message: "#{ENV["BRANCH_NAME_HEAD_REF"]}"
  )

  deploygate_feedback_message = "#{lane_context[SharedValues::DEPLOYGATE_URL]}; #{lane_context[SharedValues::DEPLOYGATE_REVISION]}; #{lane_context[SharedValues::DEPLOYGATE_APP_INFO]}"
  puts "deploygate_feedback_message: #{deploygate_feedback_message}"
  app_info = lane_context[SharedValues::DEPLOYGATE_APP_INFO]
  info_description = app_info[:description]
  info_organization_name = app_info[:name]

  send_slack_message(
    info_description: info_description,
    build_number: "#{lane_context[SharedValues::DEPLOYGATE_REVISION]}",
    branch_name: branch_name_head_ref,
    info_organization_name: info_organization_name
  )
end

private_lane :check_env_var do
  ensure_env_vars(
    env_vars: [
      # 'MATCH_KEYCHAIN_PASSWORD', # runer电脑的密码
      'APP_STORE_CONNECT_API_KEY_KEY_ID',     # APP STORE CONNECT API KEY: use to adovid 2FA (Two-Factor Authentication)
      'APP_STORE_CONNECT_API_KEY_ISSUER_ID',
      'APP_STORE_CONNECT_API_KEY_KEY',        # Use "cat AuthKey_ABCDEFGH.p8 | base64" to generate the content (The original .p8 file, store in Antony's laptop)
      'MATCH_GIT_URL',                        # URL of the certificates repository
      'MATCH_GIT_BASIC_AUTHORIZATION',        # Use to access the certificates repository: evp4-ios-certificates
      'MATCH_PASSWORD'
    ]
  )
end

# def ensure_temp_keychain(name)
#   delete_keychain(
#     name: name
#   ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")

#   create_keychain(
#     name: name,
#     password: 'temppassword',
#     unlock: true,
#     timeout: 1800
#   )
# end

private_lane :send_slack_message do |options|
  message = "info_description: #{options[:info_description]}; info_organization_name: #{options[:info_organization_name]}; build_number: ##{options[:build_number]}; branch_name: #{options[:branch_name]}"
  puts "message: #{message}"

  branch_name = git_branch
  puts "branch_name: #{branch_name}"

  deploygate_api_token = branch_name == 'main' ? "IS MAIN TOKEN" : "IS NOT MAIN TOKEN"
  puts "deploygate_api_token: #{deploygate_api_token}"

  slack(
    username: "EVP4-Bot",
    message: message,
    # slack_url: ENV["SLACK_WEBHOOK"],
    slack_url: "https://hooks.slack.com/services/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",
    # channel: "#channel",  # Optional, by default will post to the default channel configured for the POST URL.
    success: true,        # Optional, defaults to true.
    payload: {  # Optional, lets you specify any number of your own Slack attachments.
      "Build Date" => Time.new.to_s,
    },
    default_payloads: [:last_git_commit], # Optional, lets you specify default payloads to include. Pass an empty array to suppress all the default payloads.
    attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).
         # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.
      # image_url: "https://fastlane.tools/assets/img/fastlane_icon.png",
      # image_url: "https://i.ibb.co/RSXY7z8/Screenshot-2022-11-18-at-14-39-18.png",
      image_url: "https://i.ibb.co/mytvvJG/Test-CICD-qr.png",
      # thumb_url: "https://i.ibb.co/RSXY7z8/Screenshot-2022-11-18-at-14-39-18.png",
    },
    fail_on_error: false
  )
end