import("./OtherFastfiles/TempKeychain")
import("./OtherFastfiles/RunUnitTest")

default_platform(:ios)

platform :ios do  
  before_all do
    delete_keychain(name: 'fastlane_tmp_keychain-db') if File.exist? File.expand_path("~/Library/Keychains/fastlane_tmp_keychain-db")
    setup_ci # will creste the "fastlane_tmp_keychain-db" in CI
    check_env_var
  end

  desc "Building"
  lane :build do
    xcode_select("/Applications/Xcode.app")
    
    # run_unit_test

    match_adhoc
    # match_development

    archive
    
    upload_deploygate

  end

  rescue => exception
    # Error handle
    delete_keychain(name: 'fastlane_tmp_keychain-db') if File.exist? File.expand_path("~/Library/Keychains/fastlane_tmp_keychain-db")
    clean_build_artifacts
    # send error message to Slack
    raise exception

  after_all do
    delete_keychain(name: 'fastlane_tmp_keychain-db') if File.exist? File.expand_path("~/Library/Keychains/fastlane_tmp_keychain-db")
    clean_build_artifacts
  end

end

private_lane :get_apple_api_key do
	api_key = app_store_connect_api_key(
		key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
		issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
		key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
		is_key_content_base64: true
	)
end

private_lane :match_adhoc do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"], # 因为是环境变量，不写也可以
		type: 'adhoc',
		app_identifier: "jp.tokyo.TestCICD",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
    # keychain_name: 'fastlane_tmp_keychain-db'
	)
end

private_lane :match_development do
	get_apple_api_key

	match(
    git_url: ENV["MATCH_GIT_URL"], # 因为是环境变量，不写也可以
		type: 'development',
		app_identifier: "jp.tokyo.TestCICD",
		api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
		git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"]
    # keychain_name: 'fastlane_tmp_keychain-db',
    # readonly: false,
    # include_all_certificates: true,
    # force_for_new_certificates: true
	)
end

private_lane :archive do
	# update_code_signing_settings(use_automatic_signing: false)
	settings_to_override = {
		:BUNDLE_IDENTIFIER => "jp.tokyo.TestCICD",
		:PROVISIONING_PROFILE_SPECIFIER => "match AdHoc jp.tokyo.TestCICD"
	}
  
	gym(
		# codesigning_identity: "iPhone Distribution", # 不能设置，否则mapbox会报需要一个development team
    # codesigning_identity: "Apple Distribution",
		scheme: "TestCICD", # The project's scheme. Make sure it's marked as `Shared`
		clean: true,
		xcargs: settings_to_override,
		silent: true,
    export_method: "ad-hoc",
    export_options: {
      provisioningProfiles: { 
        "jp.tokyo.TestCICD" => "match AdHoc jp.tokyo.TestCICD"
      }
    }
	)
end

private_lane :upload_deploygate do
  deploygate_api_token = 'f0e6b9c8-083d-4d2d-9771-640f2a580018'
  deploygate_user = 'antony1380'

  commit = last_git_commit

  deploy_message = "#{ENV["DEPLOYGATE_CUSTOM_MESSAGE"]}. #{commit[:abbreviated_commit_hash]} #{commit[:message]}"

  puts "deploy_message: #{deploy_message}"

  deploygate(
      api_token: deploygate_api_token,
      user: deploygate_user,
      ipa: "TestCICD.ipa",
      message: deploy_message
  )
end

private_lane :check_env_var do
  ensure_env_vars(
    env_vars: [
      # 'MATCH_KEYCHAIN_PASSWORD', # runer电脑的密码
      'APP_STORE_CONNECT_API_KEY_KEY_ID',     # APP STORE CONNECT API KEY: use to adovid 2FA (Two-Factor Authentication)
      'APP_STORE_CONNECT_API_KEY_ISSUER_ID',
      'APP_STORE_CONNECT_API_KEY_KEY',        # Use "cat AuthKey_ABCDEFGH.p8 | base64" to generate the content (The original .p8 file, store in Antony's laptop)
      'MATCH_GIT_URL',                        # URL of the certificates repository
      'MATCH_GIT_BASIC_AUTHORIZATION',        # Use to access the certificates repository: evp4-ios-certificates
      'MATCH_PASSWORD'
    ]
  )
end

# def ensure_temp_keychain(name)
#   delete_keychain(
#     name: name
#   ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")

#   create_keychain(
#     name: name,
#     password: 'temppassword',
#     unlock: true,
#     timeout: 1800
#   )
# end